// Prisma schema for Splitwise+ backend

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum GroupRole {
  ADMIN
  MEMBER
}

enum SplitMode {
  EQUAL
  UNEQUAL
  PERCENT
  SHARES
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  passwordHash   String?
  name           String
  avatarUrl      String?
  googleId       String?         @unique
  appleId        String?         @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  memberships    GroupMember[]
  groupsCreated  Group[]         @relation("GroupCreator")
  expensesPaid   Expense[]       @relation("ExpensePayer")
  expenseShares  ExpenseShare[]
  settlementsOut Settlement[]    @relation("SettlementFrom")
  settlementsIn  Settlement[]    @relation("SettlementTo")
}

model Group {
  id           String         @id @default(cuid())
  name         String
  description  String?
  baseCurrency String
  createdById  String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  createdBy    User           @relation("GroupCreator", fields: [createdById], references: [id])
  members      GroupMember[]
  expenses     Expense[]
  settlements  Settlement[]
}

model GroupMember {
  id        String    @id @default(cuid())
  userId    String
  groupId   String
  role      GroupRole @default(MEMBER)
  joinedAt  DateTime  @default(now())

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}

model Expense {
  id            String         @id @default(cuid())
  groupId       String
  description   String
  notes         String?
  currency      String
  amount        Decimal        @db.Decimal(24, 6)
  baseCurrency  String
  baseAmount    Decimal        @db.Decimal(24, 6)
  fxRateUsed    Decimal        @db.Decimal(30, 12)
  paidById      String
  occurredAt    DateTime       @default(now())
  splitMode     SplitMode
  metadata      Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  group   Group   @relation(fields: [groupId], references: [id])
  paidBy  User    @relation("ExpensePayer", fields: [paidById], references: [id])
  shares  ExpenseShare[]

  @@index([groupId])
  @@index([paidById])
}

model ExpenseShare {
  id         String   @id @default(cuid())
  expenseId  String
  userId     String
  amount     Decimal  @db.Decimal(24, 6)
  percent    Decimal? @db.Decimal(10, 4)
  weight     Decimal? @db.Decimal(12, 4)
  createdAt  DateTime @default(now())

  expense Expense @relation(fields: [expenseId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([expenseId, userId])
  @@index([userId])
}

model Settlement {
  id         String   @id @default(cuid())
  groupId    String
  fromUserId String
  toUserId   String
  amount     Decimal  @db.Decimal(24, 6)
  currency   String
  note       String?
  createdAt  DateTime @default(now())

  group   Group @relation(fields: [groupId], references: [id])
  from    User  @relation("SettlementFrom", fields: [fromUserId], references: [id])
  to      User  @relation("SettlementTo", fields: [toUserId], references: [id])

  @@index([groupId])
  @@index([fromUserId])
  @@index([toUserId])
}